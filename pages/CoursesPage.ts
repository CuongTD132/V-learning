import { Page, Locator } from "@playwright/test";
import { BASE_URL } from "../utils/utils";

export class CoursesPage {

    readonly page: Page;
    readonly pageNumber: Locator;
    readonly courses: Locator;
    readonly nextButton: Locator;
    readonly prevButton: Locator;

    constructor(page: Page) {
        this.page = page;
        this.pageNumber = page.locator(".paginationPages li");
        this.courses = page.locator('a.cardGlobal');
        this.nextButton = page.locator('//a[text()="Sau >"]');
        this.prevButton = page.locator('//a[text()="< Tr∆∞·ªõc"]');
    }

    async goToCoursesPage(): Promise<void> {
        await this.page.goto(`${BASE_URL}/khoahoc`);
        await this.page.waitForLoadState('networkidle');
    }

    async getCourseCount(): Promise<number> {
        const count = await this.courses.count();

        if (count === 0) {
            console.log("‚ö†Ô∏è Kh√¥ng c√≥ kh√≥a h·ªçc n√†o tr√™n trang n√†y");
            return 0;
        }

        await this.courses.first().waitFor({
            state: 'visible',
            timeout: 10000
        });

        return count;
    }

    async clickCourseByIndex(index: number): Promise<void> {
        await this.courses.nth(index).waitFor({ state: 'visible' });
        await this.courses.nth(index).click();
        await this.page.waitForLoadState('networkidle');
    }

    async clickNextPage(): Promise<boolean> {
        try {
            // Ki·ªÉm tra n·∫øu n√∫t kh√¥ng visible ho·∫∑c kh√¥ng enabled => kh√¥ng click ƒë∆∞·ª£c
            const isVisible = await this.nextButton.isVisible();
            const isEnabled = await this.nextButton.isEnabled();

            if (!isVisible || !isEnabled) {
                console.log("‚ö†Ô∏è N√∫t 'Sau' kh√¥ng kh·∫£ d·ª•ng ƒë·ªÉ click");
                return false;
            }

            // B·∫•m n√∫t "Sau"
            await this.nextButton.scrollIntoViewIfNeeded();
            await this.nextButton.click();
            await this.page.waitForLoadState('networkidle');

            // Ch·ªù th·∫ª kh√≥a h·ªçc render l·∫°i
            await this.page.waitForSelector('a.cardGlobal', {
                state: 'visible',
                timeout: 10000
            });

            return true;

        } catch (error) {
            console.error("‚ùå L·ªói khi click n√∫t 'Sau':", error);
            return false;
        }
    }

    async clickPageNumber(pageNum: number): Promise<void> {
        const pageText = pageNum.toString();

        // ‚û§ PAGE 4-5: y√™u c·∫ßu 1 l·∫ßn click ‚Äú...‚Äù
        // ‚û§ PAGE 6-7: y√™u c·∫ßu 2 l·∫ßn click ‚Äú...‚Äù
        const dotsToClick = (pageNum === 4 || pageNum === 5) ? 1
            : (pageNum === 6 || pageNum === 7) ? 2
                : 0;

        // üëâ B∆∞·ªõc 1: Click v√†o d·∫•u "..." theo s·ªë l·∫ßn y√™u c·∫ßu
        for (let i = 0; i < dotsToClick; i++) {
            const ellipsis = this.page.locator('.paginationPages li', { hasText: "..." });
            const dotCounts = await ellipsis.count();

            if (dotCounts === 0) {
                console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·∫•u "..." th·ª© ${i + 1}, b·ªè qua`);
                break;
            }

            const dot = ellipsis.first();

            try {
                if (await dot.isVisible()) {
                    await dot.click();
                    console.log(`üü° ƒê√£ click d·∫•u "..." th·ª© ${i + 1}`);
                    await this.page.waitForLoadState('networkidle');
                    await this.page.waitForTimeout(300); // Cho UI c·∫≠p nh·∫≠t
                }
            } catch (e) {
                console.warn(`‚ö†Ô∏è L·ªói khi click d·∫•u "..." (l·∫ßn ${i + 1}):`, e);
            }
        }

        // üëâ B∆∞·ªõc 2: T√¨m trang s·ªë pageNum sau khi m·ªü "..."
        const allPages = this.page.locator('.paginationPages li a');
        const count = await allPages.count();
        let matchedElement: Locator | null = null;

        for (let i = 0; i < count; i++) {
            const el = allPages.nth(i);
            const text = (await el.innerText()).trim();
            if (text === pageText) {
                matchedElement = el;
                break;
            }
        }

        if (!matchedElement) {
            throw new Error(`‚ùå Kh√¥ng t√¨m th·∫•y th·∫ª ph√¢n trang c√≥ text ch√≠nh x√°c l√† "${pageText}" sau khi m·ªü d·∫•u "..."`);
        }

        // üëá B∆∞·ªõc 3: Click trang ƒë√£ t√¨m ƒë∆∞·ª£c
        await matchedElement.scrollIntoViewIfNeeded();

        const isVisible = await matchedElement.isVisible();
        const isEnabled = await matchedElement.isEnabled();

        if (!isVisible || !isEnabled) {
            throw new Error(`‚ùå Trang s·ªë ${pageNum} kh√¥ng kh·∫£ d·ª•ng ho·∫∑c kh√¥ng hi·ªÉn th·ªã.`);
        }

        await matchedElement.click();
        await this.page.waitForLoadState('networkidle');

        await this.page.waitForSelector('a.cardGlobal', {
            state: 'visible',
            timeout: 10000,
        });

        console.log(`‚úÖ ƒê√£ click v√†o trang ${pageNum} th√†nh c√¥ng`);
    }

    async goBackToCoursesAndReturnToPage(pageNum: number): Promise<void> {
        await this.page.goBack();
        await this.page.waitForLoadState('networkidle');

        // ƒê·ª£i thanh ph√¢n trang c√≥ m·∫∑t
        await this.page.waitForSelector('.paginationPages li a', {
            state: 'visible',
            timeout: 10000,
        });
        await this.clickPageNumber(pageNum);
    }

    async getCurrentPageNumber(): Promise<number> {
        try {
            const currentPageLocator = this.page.locator('.paginationPages li.active, .paginationPages li.current');
            await currentPageLocator.waitFor({ state: 'visible', timeout: 5000 });

            const currentPage = await currentPageLocator.textContent();
            const pageNum = parseInt(currentPage?.trim() || '1', 10);

            return isNaN(pageNum) ? 1 : pageNum;
        } catch (error) {
            throw new Error("‚ùå Kh√¥ng th·ªÉ l·∫•y s·ªë trang hi·ªán t·∫°i: " + error);
        }
    }
}